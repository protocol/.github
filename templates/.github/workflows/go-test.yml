on: [push, pull_request]
name: Go Test

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu", "windows", "macos" ]
        go: ${{{ config.go.versions }}}
    env:
      GOTESTFLAGS: -shuffle=on -cover -coverprofile=module-coverage.txt -coverpkg=./...
      GO386FLAGS: -shuffle=on
      GORACEFLAGS: -shuffle=on
    runs-on: ${{ fromJSON(vars[format('UCI_GO_TEST_RUNNER_{0}', matrix.os)] || format('"{0}-latest"', matrix.os)) }}
    name: ${{ matrix.os }} (go ${{ matrix.go }})
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - id: config
        uses: protocol/.github/.github/actions/read-config@master
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      - name: Go information
        run: |
          go version
          go env
      - name: Use msys2 on windows
        if: matrix.os == 'windows'
        shell: bash
        # The executable for msys2 is also called bash.cmd
        #   https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md#shells
        # If we prepend its location to the PATH
        #   subsequent 'shell: bash' steps will use msys2 instead of gitbash
        run: echo "C:/msys64/usr/bin" >> $GITHUB_PATH
      - name: Run repo-specific setup
        uses: ./.github/actions/go-test-setup
        if: hashFiles('./.github/actions/go-test-setup') != ''
      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@875f29492fe9f4123b8489763be916f80ffff872 # v1.9.0
      - name: Run tests
        if: contains(fromJSON(steps.config.outputs.json).skipOSes, matrix.os) == false
        uses: protocol/multiple-go-modules@v1.2
        env:
          GOFLAGS: ${{ format('{0} {1}', env.GOTESTFLAGS, env.GOFLAGS) }}
        with:
          run: gotestsum --jsonfile=gotest.All.json --packages=./... -- -v
      - name: Run tests (32 bit)
        # can't run 32 bit tests on OSX.
        if: matrix.os != 'macos' &&
          fromJSON(steps.config.outputs.json).skip32bit != true &&
          contains(fromJSON(steps.config.outputs.json).skipOSes, matrix.os) == false
        uses: protocol/multiple-go-modules@v1.2
        env:
          GOARCH: 386
          GOFLAGS: ${{ format('{0} {1}', env.GO386FLAGS, env.GOFLAGS) }}
        with:
          run: |
            export "PATH=$PATH_386:$PATH"
            gotestsum --jsonfile=gotest.32-bit.json --packages=./... -- -v
      - name: Run tests with race detector
        # speed things up. Windows and OSX VMs are slow
        if: matrix.os == 'ubuntu' &&
          contains(fromJSON(steps.config.outputs.json).skipOSes, matrix.os) == false
        uses: protocol/multiple-go-modules@v1.2
        env:
          GOFLAGS: ${{ format('{0} {1}', env.GORACEFLAGS, env.GOFLAGS) }}
        with:
          run: gotestsum --jsonfile=gotest.Race_Detection.json --packages=./... -- -v -race
      - name: Collect coverage files
        id: coverages
        shell: bash
        run: echo "files=$(find . -type f -name 'module-coverage.txt' | tr -s '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@d9f34f8cd5cb3b3eb79b3e4b5dae3a16df499a70 # v3.1.1
        with:
          files: ${{ steps.coverages.outputs.files }}
          env_vars: OS=${{ matrix.os }}, GO=${{ matrix.go }}
      - if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ format('{0}_{1}', matrix.os, matrix.go) }}
          path: '**/gotest.*.json'
  report:
    needs: [test]
    if: success() || failure()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
      - run: |
          for artifact in $(ls); do
            for json in $(find "$artifact" -name "gotest.*.json"); do
              tmp="$(mktemp)"
              jq -s '.' "$json" > "$tmp"
              mv "$tmp" "$json"
              docker run --rm -v $(pwd):/workspace -w /workspace ghcr.io/pl-strflt/saxon:v1 -json:"$json" -xsl:/etc/gotest.xsl -o:"$(dirname $json)/$(basename $json .json).xml"
            done
            for xml in $(find "$artifact" -name "gotest.*.xml"); do
              docker run --rm -v $(pwd):/workspace -w /workspace ghcr.io/pl-strflt/saxon:v1 -s:"$xml" -xsl:/etc/junit-summary.xsl -o:"$(dirname $xml)/$(basename $xml .xml).html"
            done
            artifact_header="$(jq -jn '$artifact | split("_") | "OS: \(.[0]), Go: \(.[1])"' --arg artifact "$artifact")"
            echo "# $artifact_header" >> $GITHUB_STEP_SUMMARY
            for html in $(find "$artifact" -name "gotest.*.html"); do
              module_header="$(dirname "$html")"
              module_header="${module_header#"$artifact"}"
              test_header="$(basename "$html" .html)"
              test_header="${test_header#"gotest."}"
              test_header="${test_header//_/ }"
              echo "## ${module_header:-/} $test_header Tests" >> $GITHUB_STEP_SUMMARY
              cat "$html" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            done
          done
