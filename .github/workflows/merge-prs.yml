name: Merge PRs

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # https://crontab.guru/every-day

jobs:
  dispatch:
    name: Merge PRs
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.WEB3BOT_GITHUB_TOKEN }}
    steps:
      - name: Merge PRs
        env:
          QUERY: is:pr author:web3-bot state:open status:success head:web3-bot/sync archived:false
        uses: actions/github-script@v6
        with:
          retries: 12
          script: |
            core.info(`Looking for PRs matching the query: ${process.env.QUERY}`)
            const items = await github.paginate(github.rest.search.issuesAndPullRequests, {
              q: process.env.QUERY
            })
            core.info(`Filtering out the PRs that cannot be merged`)
            const prs = []
            for (const item of items) {
              core.info(`Retrieving ${item.html_url}`)
              const [_, owner, repo] = item.url.match(/repos\/(.+?)\/(.+?)\/issues/)
              const pr = await github.rest.pulls.get({
                owner,
                repo,
                pull_number: item.number
              })
              if (pr.mergeable_state == 'clean') {
                core.info(`${pr.html_url} can be merged`)
                prs.push(pr)
              } else {
                core.info(`${pr.html_url} cannot be merged`)
              }
            }
            core.info(`Attempting to merge the PRs`)
            const failed = []
            for (const pr of prs) {
              core.info(`Merging ${pr.html_url}`)
              try {
                await octokit.rest.pulls.merge({
                  owner: pr.base.repo.owner.login,
                  repo: pr.base.repo.name,
                  pull_number: pr.number,
                  merge_method: 'squash'
                })
                core.info(`Merged ${pr.html_url}`)
              } catch(error) {
                core.error(`Couldn't merge ${pr.html_url}, got: ${error}`)
                failed.push(pr)
              }
            }
            if (failed.length != 0) {
              throw new Error(`Failed to merge ${failed.length} PRs`)
            }
