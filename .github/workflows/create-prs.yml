name: Create PRs

on:
  workflow_dispatch:
  workflow_run:
    workflows: [Dispatch]
    types:
      - completed

jobs:
  dispatch:
    name: Create PRs
    runs-on: ubuntu-latest
    steps:
      - name: Create PRs
        env:
          BRANCH: web3-bot/sync
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WEB3_BOT_GITHUB_TOKEN }}
          retries: 0
          script: |
            const request = async function(req, opts) {
              try {
                return await req(opts)
              } catch(err) {
                opts.request.retries = (opts.request.retries || 0) + 1
                if (err.status === 403) {
                  if (err.response.headers['x-ratelimit-remaining'] === '0') {
                    const retryAfter = err.response.headers['x-ratelimit-reset'] - Math.floor(Date.now() / 1000) || 1
                    core.info(`Rate limit exceeded, retrying in ${retryAfter} seconds`)
                    await new Promise(resolve => setTimeout(resolve, retryAfter * 1000))
                    return request(req, opts)
                  }
                  if (err.message.toLowerCase().includes('secondary rate limit')) {
                    const retryAfter = Math.pow(2, opts.request.retries)
                    core.info(`Secondary rate limit exceeded, retrying in ${retryAfter} seconds`)
                    await new Promise(resolve => setTimeout(resolve, retryAfter * 1000))
                    return request(req, opts)
                  }
                }
                throw err
              }
            }
            github.hook.wrap('request', request)

            core.info(`Looking for repositories the user has direct access to`)
            const items = await github.paginate(github.rest.repos.listForAuthenticatedUser, {
              affiliation: 'collaborator'
            })
            core.info(`Filtering out the repositories without unmerged branches`)
            const repos = []
            for (const item of items) {
              core.info(`Checking if a PR can be created for ${item.html_url}`)
              let branch
              try {
                branch = (await github.rest.repos.getBranch({
                  owner: item.owner.login,
                  repo: item.name,
                  branch: process.env.BRANCH
                }))?.data
              } catch(error) {
                if (error.status != 404) {
                  throw error
                }
              }
              if (branch != undefined) {
                core.info(`The branch exists in ${item.html_url}`)
              } else {
                core.info(`The branch does not exist in ${item.html_url}`)
                continue
              }
              const {data: compare} = await github.rest.repos.compareCommitsWithBasehead({
                owner: item.owner.login,
                repo: item.name,
                basehead: `${item.default_branch}...${branch.name}`
              })
              if (compare.status == 'ahead') {
                core.info(`PR for ${item.html_url} can be created`)
              } else {
                core.info(`PR for ${item.html_url} cannot be created`)
                continue
              }
              const {data: pulls} = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner: item.owner.login,
                repo: item.name,
                commit_sha: branch.commit.sha
              })
              if (pulls.length == 0) {
                core.info(`The PR does not exist yet in ${item.html_url}`)
                repos.push(item)
              } else {
                core.info(`The PR already exists at ${pulls[0].html_url}`)
              }
            }
            core.info(`Attempting to create the PRs`)
            const failed = []
            for (const repo of repos) {
              core.info(`Creating PR in ${repo.html_url}`)
              try {
                const pr = await octokit.rest.pulls.create({
                  owner: repo.owner.login,
                  repo: repo.name,
                  head: process.env.BRANCH,
                  base: repo.default_branch
                })
                core.info(`${pr.html_url} created successfully`)
              } catch(error) {
                core.error(`Couldn't create a PR for ${repo.html_url}, got: ${error}`)
                failed.push(repo)
              }
            }
            if (failed.length != 0) {
              throw new Error(`Failed to create PRs in ${failed.length} repos`)
            }
