# This workflow cannot post sticky comments on PRs from forked repositories.
# Instead, it outputs the message it would have posted as a workflow notice.
# See https://github.com/protocol/.github/issues/254 for details.

name: Release Checker
on: [ workflow_call ]

jobs:
  releaser:
    runs-on: ubuntu-latest
    env:
      TAG_EXISTS: "true"
      VERSION: "" # the version number read from version.json
      COMPARETO: "" # the version number to compare this version to
      GORELEASE: ""
      GOCOMPAT: ""
      GOMODDIFF: ""
      RELEASE_BRANCH_NOTE: ""
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "1.19.x"
      - name: Determine version
        if: hashFiles('version.json')
        run: echo "VERSION=$(jq -r .version version.json)" >> $GITHUB_ENV
      - name: Check if the tag already exists
        # Check if a git tag for the version (as read from version.json) exists
        # If that is the case, we don't need to run the rest of the workflow.
        if: env.VERSION != ''
        run: |
          git fetch origin --tags
          status=0
          git rev-list $VERSION &> /dev/null || status=$?
          if [[ $status != 0 ]]; then
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi
      - name: Install semver (node command line tool)
        if: env.TAG_EXISTS == 'false'
        run: npm install -g "https://github.com/npm/node-semver#e79ac3a450e8bb504e78b8159e3efc7089569" # v7.3.5
      - name: Check version
        if: env.TAG_EXISTS == 'false'
        run: semver ${{ env.VERSION }} # fails if the version is not a valid semver version (e.g. v0.1 would fail)
      - name: Determine version number to compare to
        if: env.TAG_EXISTS == 'false'
        # We need to determine the version number we want to compare to,
        # taking into account that this might be a (patch) release on a release branch.
        # Example:
        # Imagine a module that has releases for v0.1.0, v0.2.0 and v0.3.0.
        # When trying to cut a release v0.2.1, we need to base our comparisons on v0.2.0.
        # When trying to cut a release v0.3.1 or v0.4.0, we need to base our comparisons on v0.3.0.
        run: |
          git fetch origin --tags
          go install github.com/marten-seemann/semver-highest@fcdc98f8820ff0e6613c1bee071c096febd98dbf
          v=$(semver-highest -target ${{ env.VERSION }} -versions $(git tag | paste -sd , -))
          status=$?
          if [[ $status != 0 ]]; then
            echo $v
            exit $status
          fi
          echo "COMPARETO=$v" >> $GITHUB_ENV
      - name: Post output
        if: env.TAG_EXISTS == 'false' && env.COMPARETO == ''
        uses: marocchino/sticky-pull-request-comment@82e7a0d3c51217201b3fedc4ddde6632e969a477 # v2.1.1
        with:
          header: release-check
          recreate: true
          message: |
            Suggested version: `${{ env.VERSION }}`

            This is the first release of this module.
      - name: run git diff on go.mod file(s)
        if: env.TAG_EXISTS == 'false' && env.COMPARETO != ''
        run: |
          # First get the diff for the go.mod file in the root directory...
          output=$(git diff ${{ env.COMPARETO }}..HEAD -- './go.mod')
          # ... then get the diff for all go.mod files in subdirectories.
          # Note that this command also finds go.mod files more than one level deep in the directory structure.
          output+=$(git diff ${{ env.COMPARETO }}..HEAD -- '*/go.mod')
          if [[ -z "$output" ]]; then
            output="(empty)"
          fi
          printf "GOMODDIFF<<EOF\n%s\nEOF" "$output" >> $GITHUB_ENV
      - name: Run gorelease
        if: env.TAG_EXISTS == 'false' && env.COMPARETO != ''
        # see https://github.com/golang/exp/commits/master/cmd/gorelease
        run: |
          go install golang.org/x/exp/cmd/gorelease@b4e88ed8e8aab63a9aa9a52276782ebbc547adef
          output=$((gorelease -base ${{ env.COMPARETO }}) 2>&1 || true)
          printf "GORELEASE<<EOF\n%s\nEOF" "$output" >> $GITHUB_ENV
      - name: Check Compatibility
        if: env.TAG_EXISTS == 'false' && env.COMPARETO != ''
        run: |
          go install github.com/smola/gocompat/cmd/gocompat@8498b97a44792a3a6063c47014726baa63e2e669 # v0.3.0
          output=$(gocompat compare --go1compat --git-refs="${{ env.COMPARETO }}..HEAD" ./... || true)
          if [[ -z "$output" ]]; then
            output="(empty)"
          fi
          printf "GOCOMPAT<<EOF\n%s\nEOF" "$output" >> $GITHUB_ENV
      - run: |
          echo "RELEASE_BRANCH_NOTE<<EOF
          ---
          ## Cutting a Release (when not on \`${{ github.event.repository.default_branch }}\`)

          This PR is targeting \`${{ github.base_ref }}\`, which is not the default branch.
          If you wish to cut a release once this PR is merged, please add the \`release\` label to this PR.
          EOF" >> $GITHUB_ENV
        if: github.base_ref != github.event.repository.default_branch
      - run: |
          echo 'MESSAGE<<EOF
          Suggested version: `${{ env.VERSION }}`
          Comparing to: [`${{ env.COMPARETO }}`](${{ github.event.pull_request.base.repo.html_url }}/releases/tag/${{ env.COMPARETO }}) ([diff](${{ github.event.pull_request.base.repo.html_url }}/compare/${{ env.COMPARETO }}..${{ github.event.pull_request.head.label }}))

          Changes in `go.mod` file(s):
          ```diff
          ${{ env.GOMODDIFF }}
          ```

          `gorelease` says:
          ```
          ${{ env.GORELEASE }}
          ```

          `gocompat` says:
          ```
          ${{ env.GOCOMPAT }}
          ```
          ${{ env.RELEASE_BRANCH_NOTE }}
          EOF' >> $GITHUB_ENV
        if: env.TAG_EXISTS == 'false' && env.COMPARETO != ''
      - name: Post message on PR
        uses: marocchino/sticky-pull-request-comment@82e7a0d3c51217201b3fedc4ddde6632e969a477 # v2.1.1
        if: env.TAG_EXISTS == 'false' && env.COMPARETO != '' && github.event.pull_request.head.repo.full_name == github.repository
        with:
          header: release-check
          recreate: true
          message: ${{ env.MESSAGE }}
      - name: Set a notice message on run
        run: |
          message="${MESSAGE//'%'/'%25'}"
          message="${message//$'\n'/'%0A'}"
          message="${message//$'\r'/'%0D'}"
          echo "::notice ::$message"
        if: env.TAG_EXISTS == 'false' && env.COMPARETO != '' && github.event.pull_request.head.repo.full_name != github.repository
