# This workflow is triggered by the dispatch workflow.

name: Deploy

on:
  workflow_dispatch:
    inputs:
      targets:
        description: "List of repositories to deploy to"
        required: true

jobs:
  copy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cfg: ${{ fromJson(github.event.inputs.targets) }}
      max-parallel: 10
    env:
      TARGET_REPO_DIR: "target-repo"
      TEMPLATE_REPO_DIR: "template-repo"
      TEMPLATE_DIR: "templates"
      NEEDS_UPDATE: 0
      INITIAL_WORKFLOW_DEPLOYMENT: 0
      GO_VERSION_BUMP: 0
      FILES: ""
    name: ${{ matrix.cfg.target }}
    steps:
    - name: Checkout ${{ matrix.cfg.target }}
      uses: actions/checkout@v3
      with:
        path: ${{ env.TARGET_REPO_DIR }}
        repository: ${{ matrix.cfg.target }}
        token: ${{ secrets.WEB3BOT_GITHUB_TOKEN }}
        persist-credentials: true
        submodules: recursive
    - name: Checkout template repository
      uses: actions/checkout@v3
      with:
        path: ${{ env.TEMPLATE_REPO_DIR }}
    - name: determine GitHub default branch
      working-directory: ${{ env.TARGET_REPO_DIR }}
      run: |
        default_branch=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
        echo "DEFAULT_BRANCH=$default_branch" >> $GITHUB_ENV
    - name: git config
      working-directory: ${{ env.TARGET_REPO_DIR }}
      run: |
        git config user.name web3-bot
        git config user.email web3-bot@users.noreply.github.com
    - name: determine files to add
      # By setting the environment variable, it's possible to programmatically add / modify this list.
      # See https://github.com/protocol/.github/blob/38135c75e47839623bf9b2748275d8c6167a8fa8/.github/workflows/copy-workflow.yml#L163-L168 for an example, how we used to make use of this.
      run: |
        files=${{ toJson(toJson(matrix.cfg.files)) }}
        files=$(echo -e "$files" | jq -c '.')
        echo "FILES=$files" >> $GITHUB_ENV
    - name: is initial workflow deployment
      # INITIAL_WORKFLOW_DEPLOYMENT=1 iff none of the files in the target repository exist yet
      run: |
        initial_workflow_deployment=1
        for f in $(jq -r '.[]' <<< ${{ toJson(env.FILES) }}); do
          if [[ -f $TARGET_REPO_DIR/$f ]]; then
            initial_workflow_deployment=0
            break
          fi
        done
        echo "INITIAL_WORKFLOW_DEPLOYMENT=$initial_workflow_deployment" >> $GITHUB_ENV
    - name: remove Travis (on initial workflow deployment)
      if: ${{ env.INITIAL_WORKFLOW_DEPLOYMENT == 1 }}
      working-directory: ${{ env.TARGET_REPO_DIR }}
      run: |
        if [[ -f .travis.yml ]]; then
          git rm .travis.yml
          git commit -m "disable Travis"
        fi
    - name: remove CircleCI (on initial workflow deployment)
      if: ${{ env.INITIAL_WORKFLOW_DEPLOYMENT == 1 }}
      working-directory: ${{ env.TARGET_REPO_DIR }}
      run: |
        if [[ -d .circleci ]]; then
          git rm -r .circleci
          git commit -m "disable CircleCI"
        fi
    - name: remove gx (on initial workflow deployment)
      if: ${{ env.INITIAL_WORKFLOW_DEPLOYMENT == 1 }}
      working-directory: ${{ env.TARGET_REPO_DIR }}
      run: |
        if [[ -d .gx ]]; then
          git rm -r .gx
          git commit -m "remove .gx"
        fi
    - name: Run steps specific to go
      if: matrix.cfg.deploy_go
      # use of ${{ env.TEMPATE_REPO_DIR }} is not allowed here
      uses: ./template-repo/.github/actions/copy-workflow-go
    - name: Run steps specific to versioning
      if: matrix.cfg.deploy_versioning
      uses: ./template-repo/.github/actions/copy-workflow-versioning
    - name: Add files
      run: |
        for f in $(jq -r '.[]' <<< ${{ toJson(env.FILES) }}); do
          echo -e "\nProcessing $f."
          # add DO NOT EDIT header
          tmp=$(mktemp)
          cat $TEMPLATE_REPO_DIR/$TEMPLATE_DIR/header.yml $TEMPLATE_REPO_DIR/$TEMPLATE_DIR/$f > $tmp
          # replace $default-branch with this repo's GitHub default branch
          sed -i "s:\$default-branch:${{ env.DEFAULT_BRANCH }}:g" $tmp
          # create commit, if necessary
          commit_msg=""
          if [[ ! -f "$TARGET_REPO_DIR/$f" ]]; then
            echo "First deployment.\n"
            commit_msg="add $f"
          else
            status=$(cmp --silent $TARGET_REPO_DIR/$f $tmp; echo $?)
            if [[ $status -ne 0 ]]; then
              echo "Update needed."
              commit_msg="update $f"
            else
              echo "File identical. Skipping."
              continue
            fi
          fi
          mkdir -p "$TARGET_REPO_DIR/$(dirname $f)"
          mv $tmp $TARGET_REPO_DIR/$f
          pushd $TARGET_REPO_DIR > /dev/null
          git add $f
          git commit -m "$commit_msg"
          popd > /dev/null
        done
    - name: Check if we need to update the branch
      working-directory: ${{ env.TARGET_REPO_DIR }}
      run: echo "NEEDS_UPDATE=$(git rev-list HEAD...origin/$(git rev-parse --abbrev-ref HEAD) --ignore-submodules --count 2> /dev/null || echo 1)" >> $GITHUB_ENV
    - name: Force push web3-bot/sync branch
      if: ${{ env.NEEDS_UPDATE != 0 }}
      working-directory: ${{ env.TARGET_REPO_DIR }}
      run: |
        git checkout -B web3-bot/sync
        git push origin web3-bot/sync -f
