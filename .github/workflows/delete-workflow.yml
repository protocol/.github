name: Delete workflow

on:
  workflow_dispatch:
    inputs:
      path:
        description: The path of the workflow to delete
        required: true
      dry-run:
        description: Whether to run the workflow in dry-run mode
        required: false
        default: 'true'

jobs:
  dispatch:
    name: Create PRs
    runs-on: ubuntu-latest
    steps:
      - name: Create PRs
        env:
          DRY_RUN: ${{ github.event.inputs.dry-run || 'true' }}
          PATH: ${{ github.event.inputs.path }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WEB3_BOT_GITHUB_TOKEN }}
          retries: 0
          script: |
            const request = async function(req, opts) {
              try {
                return await req(opts)
              } catch(err) {
                opts.request.retries = (opts.request.retries || 0) + 1
                if (err.status === 403) {
                  if (err.response.headers['x-ratelimit-remaining'] === '0') {
                    const retryAfter = err.response.headers['x-ratelimit-reset'] - Math.floor(Date.now() / 1000) || 1
                    core.info(`Rate limit exceeded, retrying in ${retryAfter} seconds`)
                    await new Promise(resolve => setTimeout(resolve, retryAfter * 1000))
                    return request(req, opts)
                  }
                  if (err.message.toLowerCase().includes('secondary rate limit')) {
                    const retryAfter = Math.pow(2, opts.request.retries)
                    core.info(`Secondary rate limit exceeded, retrying in ${retryAfter} seconds`)
                    await new Promise(resolve => setTimeout(resolve, retryAfter * 1000))
                    return request(req, opts)
                  }
                }
                throw err
              }
            }
            github.hook.wrap('request', request)

            core.info(`Looking for repositories the user has direct access to`)
            const items = await github.paginate(github.rest.repos.listForAuthenticatedUser, {
              affiliation: 'collaborator'
            })
            core.info(`Filtering out the repositories without the file`)
            const files = []
            for (const item of items) {
              core.info(`Checking if there is a file in ${item.html_url}`)
              let file
              try {
                file = (await github.rest.repos.getContent({
                  owner: item.owner.login,
                  repo: item.name,
                  path: process.env.PATH
                }))?.data
              } catch(error) {
                if (error.status != 404) {
                  throw error
                }
              }
              if (file) {
                core.info(`${file.html_url} exists`)
                files.push({
                  ...file,
                  repo: item
                })
              } else {
                core.info(`The file does not exist in ${item.html_url}`)
              }
            }
            core.info(`Attempting to delete the files`)
            const failed = []
            for (const file of files) {
              if (process.env.DRY_RUN == 'true') {
                core.info(`Would have deleted ${file.html_url}`)
                continue
              }
              core.debug(`Deleting ${file.html_url}`)
              try {
                await github.rest.repos.deleteFile({
                  owner: file.repo.owner.login,
                  repo: file.repo.name,
                  path: process.env.PATH,
                  message: `ci: delete ${process.env.PATH}`,
                  sha: file.sha
                })
                core.info(`${file.html_url} deleted successfully`)
              } catch(error) {
                core.error(`Couldn't delete ${file.html_url}, got: ${error}`)
                failed.push(file)
              }
            }
            if (failed.length != 0) {
              throw new Error(`Failed to delete ${failed.length} files`)
            }
