name: copy workflow go
description: Copy workflow steps specific to go

runs:
  using: "composite"
  steps:
    - uses: actions/setup-go@v2
      with:
        # This should be the same Go version we use in the go-check workflow.
        # go mod tidy, go vet, staticcheck and gofmt might behave differently depending on the version.
        go-version: "1.18.x"
    - name: bump go.mod go version if needed
      uses: protocol/multiple-go-modules@v1.2
      with:
        working-directory: ${{ env.TARGET_REPO_DIR }}
        run: |
          # We want our modules to support two Go versions at a time.
          # As of March 2022, Go 1.18 is the latest stable.
          # go.mod's Go version declares the language version being used.
          # As such, it has to be the minimum of all Go versions supported.
          # Bump this every six months, as new Go versions come out.
          TARGET_VERSION=1.17
          PREVIOUS_TARGET_VERSION=1.16

          # Note that the "<" comparison doesn't understand semver,
          # but it should be good enough for the foreseeable future.
          CURRENT_VERSION=$(go list -m -f {{.GoVersion}})

          if [[ $CURRENT_VERSION < $TARGET_VERSION ]]; then
            echo "GO_VERSION_BUMP=1" >> $GITHUB_ENV

            # We tidy immediately because some updates require it
            # We ensure dependencies are resolved to versions supported by the PREVIOUS_TARGET_VERSION of Go
            # It also modifies Go version in the go.mod which ensures there's a diff
            go mod tidy -go=$PREVIOUS_TARGET_VERSION && go mod tidy -go=$TARGET_VERSION

            $ Just in case, check again if everything's OK after the version upgrade
            go mod tidy

            # In the future, "go fix" may make changes to Go code,
            # such as to adapt to language changes or API deprecations.
            # This is largely a no-op as of Go 1.17, and that's fine.
            go fix ./...
            git add .

            # We don't tidy, because the next step does that.
            # Separate commits also help with reviews.
            git commit -m "bump go.mod to Go $TARGET_VERSION and run go fix"
          fi
    - name: go mod tidy (on initial workflow deployment)
      if: ${{ env.INITIAL_WORKFLOW_DEPLOYMENT == 1 }}
      uses: protocol/multiple-go-modules@v1.2
      with:
        working-directory: ${{ env.TARGET_REPO_DIR }}
        run: |
          go mod tidy
          if ! git diff --quiet; then
            git add .
            git commit -m "run go mod tidy"
          fi
    - name: gofmt -s (on initial workflow deployment and on new Go version)
      if: ${{ env.INITIAL_WORKFLOW_DEPLOYMENT == 1 || env.GO_VERSION_BUMP == 1}}
      working-directory: ${{ env.TARGET_REPO_DIR }}
      shell: bash
      run: |
        gofmt -s -w .
        if ! git diff --quiet; then
          git add .
          git commit -m "run gofmt -s"
        fi
